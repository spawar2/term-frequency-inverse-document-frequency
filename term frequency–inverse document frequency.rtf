{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Monaco;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red83\green83\blue83;\red255\green255\blue255;\red24\green25\blue26;
\red234\green234\blue234;\red0\green0\blue0;\red24\green25\blue27;\red234\green234\blue234;}
{\*\expandedcolortbl;;\cssrgb\c40000\c40000\c40000;\cssrgb\c100000\c100000\c100000;\cssrgb\c12549\c12941\c13333;
\cssrgb\c93333\c93333\c93333;\cssrgb\c0\c0\c0;\cssrgb\c12549\c12941\c14118;\cssrgb\c93333\c93333\c93333;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 # Code to 
\f1\b\fs28 \cf4 \cb3 \strokec4 term frequency\'96inverse document frequency
\f2\b0 ,
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 # Read all .txt files in empty list, then pass them sequentially to \cf2 \cb3 \outl0\strokewidth0 calculate_tf() function
\f2\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\fs36 \cf2 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 name_counts = \{\}\cb3 \strokec2 \
\cb5 \strokec6 file_name = 
\f2\fs32 \cf7 \cb3 \strokec7 \{1.txt, 2.txt, ..., 1000.txt\}
\f0\fs36 \cf2 \cb3 \strokec2 \
\cb5 \strokec6 with open(file_name) as names_file: \cb3 \strokec2 \
\cb5 \strokec6 \'a0\'a0\'a0\'a0for name in names_file:\cb3 \strokec2 \
\cb5 \strokec6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0name = name.strip().lower() #remember to strip the newline\cb3 \strokec2 \
\cb5 \strokec6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if name in name_counts:\cb3 \strokec2 \
\cb5 \strokec6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0name_counts[name] += 1\cb3 \strokec2 \
\cb5 \strokec6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0else:\cb3 \strokec2 \
\cb5 \strokec6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0name_counts[name] = 1\cb3 \strokec2 \
\cb5 \strokec6 print(name_counts)\cb3 \strokec2 \
\
def calculate_tf(document):\
# remove punctutation, convert to lower case\
document = document.translate (str.maketrans(" ", " ", string.punctuation)).lower()\
# Split document into words\
words = document.split()\
# count frequency of each word\
word_count = Counter(words)\
# calculate frequency of each word\
tf = \{\}\
for word, count in word_count.items();\
tf [word] = count / len(words)\
return tf\
\
# Usage\
document1\
tf = calculate_tf(\cf2 \cb8 \outl0\strokewidth0 name_counts\cf2 \cb3 \outl0\strokewidth0 \strokec2 )\
print(tf)\
\
\
}